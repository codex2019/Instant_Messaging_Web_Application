{"version":3,"sources":["redux/actions/messageActions.js","redux/actions/groupActions.js","pages/messenger.js","redux/actions/userActions.js","pages/home.js","pages/login.js","pages/register.js","App.js","serviceWorker.js","redux/reducers/userReducer.js","redux/reducers/messageReducer.js","redux/reducers/groupReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["updateMessages","messages","type","insertMessage","message","handleTextChange","text","submitMessage","dispatch","getState","docs","group","groupReducer","_id","messageReducer","axios","post","withCredentials","then","catch","e","console","log","updateGroups","groups","insertGroup","newGroup","handleGroupChange","submitGroup","data","Messenger","isLoading","currentGroup","React","useEffect","get","res","window","location","setUserList","setIsLoading","useState","userList","users","setUsers","query","setQuery","logOut","document","cookie","search","target","value","regex","replace","RegExp","temp","i","length","username","match","eval","Cookies","push","sendMessage","createChat","them","body","you","textChange","groupChange","inGroup","members","mainComponent","className","map","key","onClick","member","author","placeholder","onChange","onKeyPress","user","firstName","surname","lastName","mapStateToProps","state","userReducer","connect","Home","to","Login","setUsername","password","setPassword","error","setError","md5","setFirstName","setLastName","email","setEmail","App","path","component","Register","Boolean","hostname","INITIAL_STATE","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","WebSocket","host","split","port","onmessage","parsed","JSON","parse","channel","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c19a3ce7.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const updateMessages = messages => {\n    return {\n        type: 'UPDATE_MESSAGES',\n        messages,\n    };\n};\n\nexport const insertMessage = message => {\n    return {\n        type: 'INSERT_MESSAGE',\n        message,\n    };\n};\n\nexport const handleTextChange = text => {\n    return {\n        type: 'UPDATE_TEXT',\n        text,\n    };\n};\n\nexport const submitMessage = () => (dispatch, getState) => {\n    const docs = {\n        group: getState().groupReducer.group._id,\n        message: getState().messageReducer.text,\n    }\n    axios.post('/messenger/postMessage', docs, { withCredentials: true })\n        .then(() => { })\n        .catch(e => console.log(e));\n    dispatch(handleTextChange(''));\n};","import axios from 'axios';\n\nexport const updateGroups = groups => {\n    return {\n        type: 'UPDATE_GROUPS',\n        groups,\n    };\n};\n\nexport const insertGroup = newGroup => {\n    return {\n        type: 'INSERT_GROUP',\n        newGroup,\n    };\n};\n\nexport const handleGroupChange = group => {\n    return {\n        type: 'UPDATE_GROUP',\n        group,\n    };\n};\n\nexport const submitGroup = (docs) => (dispatch) => {\n    axios.post('/messenger/postGroup', docs)\n        .then((docs) => { \n            dispatch(handleGroupChange(docs.data));\n        })\n        .catch(e => console.log(e));\n};","import React from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { connect } from 'react-redux';\nimport { setIsLoading } from '../redux/actions/userActions';\nimport { updateMessages, handleTextChange, submitMessage } from '../redux/actions/messageActions';\nimport { updateGroups, handleGroupChange, submitGroup } from '../redux/actions/groupActions';\nimport '../App.css';\n\nconst Messenger = ({ dispatch, isLoading, text, currentGroup, groups, messages }) => {\n    React.useEffect(() => {\n        axios.get('/users/verify', { withCredentials: true })\n            .then((res) => {\n                console.log(res);\n            })\n            .catch(() => {\n                window.location = '/';\n            });\n        axios.get('/users/getUsers', { withCredentials: true })\n            .then((res) => {\n                setUserList(res.data);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n        axios.get('/messenger/getMessages', { withCredentials: true })\n            .then((res) => {\n                dispatch(updateMessages(res.data));\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n        axios.get('/messenger/getGroups', { withCredentials: true })\n            .then((res) => {\n                dispatch(updateGroups(res.data));\n                dispatch(setIsLoading(false));\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }, [dispatch]);\n\n    const [userList, setUserList] = React.useState([]);\n    const [users, setUsers] = React.useState([]);\n    const [query, setQuery] = React.useState('');\n\n    const logOut = () => {\n        axios.post('/users/logout')\n            .then(() => {\n                document.cookie = 'id=id';\n                document.cookie = 'username=username';\n                document.cookie = 'password=password';\n                document.cookie = 'firstName=firstName';\n                document.cookie = 'lastName=lastName';\n\n                window.location = '/';\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n\n    const search = (e) => {\n        setQuery(e.target.value);\n\n        var regex = '/' + e.target.value.replace(new RegExp('[^a-zA-Z0-9]'), '') + '/';\n\n        const temp = [];\n        if (regex === '//') {\n            setUsers([])\n        } else {\n            for (var i = 0; i < userList.length; i++) {\n                // eslint-disable-next-line\n                if (userList[i].username.match(eval(regex))) {\n                    if (userList[i].username !== Cookies.get('username')) {\n                        temp.push(userList[i]);\n                    }\n                }\n            }\n        }\n        setUsers(temp);\n    }\n\n    const sendMessage = () => {\n        dispatch(submitMessage());\n    }\n\n    const createChat = (them) => {\n        const body = {\n            you: [Cookies.get('username'), Cookies.get('firstName') + ' ' + Cookies.get('lastName')],\n            them: them,\n        }\n        dispatch(submitGroup(body));\n        setQuery('');\n    }\n\n    const textChange = (e) => {\n        dispatch(handleTextChange(e.target.value));\n    }\n\n    const groupChange = (group) => {\n        dispatch(handleGroupChange(group));\n    }\n\n    const inGroup = (members) => {\n        for (var i=0; i < members.length; i++) {\n            if (Cookies.get('username') === members[i][0]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    let mainComponent =\n        <div className=\"main\">\n            <div className=\"side-bar\">\n                {groups.map((group, i) =>\n                    (inGroup(group.members)) ? (\n                        <div key={i}>\n                            <button onClick={() => groupChange(group)}>\n                                {group.members.map((member, i) => \n                                    (member[0] !== Cookies.get('username')) && (\n                                        member[1]\n                                    )\n                                )}\n                                <br />\n                            </button>\n                        </div>\n                    ) : (\n                        <div key={i}></div>\n                    )\n                )}\n            </div>\n            <div className=\"chat-area\">\n                {messages.map((message, i) =>\n                    ((message.group === currentGroup._id) && (message.author === Cookies.get('firstName') + ' ' + Cookies.get('lastName'))) ? (\n                        <div key={i} className=\"message right\">\n                            <p>{message.author}</p>\n                            <div className=\"message-container\">\n                                <div className=\"your-message\">\n                                    {message.message}\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        ((message.group === currentGroup._id) && (message.author !== Cookies.get('firstName') + ' ' + Cookies.get('lastName'))) && (\n                            <div key={i} className=\"message\">\n                                <p>{message.author}</p>\n                                <div className=\"message-container\">\n                                    <div className=\"other-message\">\n                                        {message.message}\n                                    </div>\n                                </div>\n                            </div>\n                        ) \n                    )\n                )}\n                <div className=\"message-field\">\n                    <input\n                        placeholder=\"Send Message...\"\n                        value={text}\n                        onChange={textChange}\n                        onKeyPress={(e) => {\n                            if (e.key === 'Enter') {\n                                sendMessage();\n                            }\n                        }}\n                    />\n                    <button onClick={sendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n\n    if (query !== '') {\n        mainComponent =\n            <div>\n                {users.map((user, i) => (\n                    <div key={i} className=\"search-result\">\n                        <div>\n                            <h3>{user.firstName} {user.surname}</h3>\n                            <p>{user.username}</p>\n                        </div>\n                        <button onClick={() => createChat([user.username, user.firstName + ' ' + user.lastName])}>Chat</button>\n                    </div>\n                ))}\n            </div>\n    }\n\n    return (\n        <div className=\"messenger\">\n            <nav>\n                <input\n                    placeholder=\"Search User...\"\n                    value={query}\n                    onChange={search}\n                />\n                <button onClick={logOut}>Log Out</button>\n            </nav>\n            {mainComponent}\n        </div >\n    );\n};\n\nconst mapStateToProps = state => ({\n    isLoading: state.userReducer.isLoading,\n    text: state.messageReducer.text,\n    currentGroup: state.groupReducer.group,\n    groups: state.groupReducer.groups,\n    messages: state.messageReducer.messages,\n});\n\nexport default connect(mapStateToProps)(Messenger);","export const setIsLoading = isLoading => ({\n    type: 'SET_IS_LOADING',\n    isLoading,\n});","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nconst Home = () => {\n\n    return (\n        <div className=\"login\">\n            <div>\n                <h1>Messenger</h1>\n                <Link to=\"/login\">Login</Link>\n                <Link to=\"/register\">Register</Link>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport md5 from 'md5';\nimport axios from 'axios';\nimport '../App.css';\n\nconst Login = () => {\n    const [username, setUsername] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [error, setError] = React.useState('');\n\n    const validate = () => {\n        const body = {\n            username,\n            password: md5(password),\n        };\n        axios.post('/users/login', body, { withCredentials: true })\n            .then((res) => {\n                if (res.data) {\n                    document.cookie = `id=${res.data._id}`;\n                    document.cookie = `username=${res.data.username}`;\n                    document.cookie = `password=${res.data.password}`;\n                    document.cookie = `firstName=${res.data.firstName}`;\n                    document.cookie = `lastName=${res.data.lastName}`;\n\n                    window.location = '/messenger';\n                } else {\n                    document.cookie = 'id=id';\n                    document.cookie = 'username=username';\n                    document.cookie = 'password=password';\n                    document.cookie = 'firstName=firstName';\n                    document.cookie = 'lastName=lastName';\n                    setError('Username or password incorrect!')\n                }\n            })\n            .catch(console.log);\n    };\n\n    return (\n        <div className=\"login\">\n            <div className=\"form\">\n                <h1>Messenger</h1>\n                <input\n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={e => setUsername(e.target.value)}\n                />\n                <br />\n                <input\n                    placeholder=\"Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                />\n                <br />\n                <button onClick={validate}>Login</button>\n                <p className=\"error\">{error}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport md5 from 'md5';\nimport axios from 'axios';\nimport '../App.css';\n\nconst Login = () => {\n    const [firstName, setFirstName] = React.useState('');\n    const [lastName, setLastName] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [username, setUsername] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const [error, setError] = React.useState('');\n\n    const validate = () => {\n        if (firstName === '' ||\n            lastName === '' ||\n            email === '' ||\n            username === '' ||\n            password === '') {\n            return setError('You forgot to enter some information!');\n        }\n        const body = {\n            firstName,\n            lastName,\n            email,\n            username,\n            password: md5(password),\n        };\n        axios.post('/users/register', body)\n            .then((res) => {\n                console.log(res);\n                window.location = '/login';\n            })\n            .catch(console.log);\n    };\n\n    return (\n        <div className=\"login\">\n            <div className=\"form\">\n                <h1>Messenger</h1>\n                <input\n                    placeholder=\"First Name\"\n                    value={firstName}\n                    onChange={e => setFirstName(e.target.value)}\n                />\n                <br />\n                <input\n                    placeholder=\"Last Name\"\n                    value={lastName}\n                    onChange={e => setLastName(e.target.value)}\n                />\n                <br />\n                <input\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                />\n                <br />\n                <input\n                    placeholder=\"Username\"\n                    value={username}\n                    onChange={e => setUsername(e.target.value)}\n                />\n                <br />\n                <input\n                    placeholder=\"Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                />\n                <br />\n                <button onClick={validate}>Register</button>\n                <p className=\"error\">{error}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Register from './pages/register';\nimport Messenger from './pages/messenger';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/messenger\" component={Messenger} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n    isLoading: true,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'SET_IS_LOADING':\n            return {\n                ...state,\n                isLoading: action.isLoading,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;","const INITIAL_STATE = {\n    messages: [],\n    text: '',\n};\n\nconst messageReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'UPDATE_MESSAGES':\n            return {\n                ...state,\n                messages: action.messages,\n            };\n        case 'UPDATE_TEXT':\n            return {\n                ...state,\n                text: action.text,\n            };\n        case 'INSERT_MESSAGE':\n            return {\n                ...state,\n                messages: [...state.messages, action.message],\n            };\n        default:\n            return state;\n    }\n};\n\nexport default messageReducer;","const INITIAL_STATE = {\n    groups: [],\n    group: {},\n};\n\nconst groupReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'UPDATE_GROUPS':\n            return {\n                ...state,\n                groups: action.groups,\n            };\n        case 'UPDATE_GROUP':\n            return {\n                ...state,\n                group: action.group,\n            };\n        case 'INSERT_GROUP':\n            return {\n                ...state,\n                groups: [...state.groups, action.newGroup],\n            };\n        default:\n            return state;\n    }\n};\n\nexport default groupReducer;","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport messageReducer from './messageReducer';\nimport groupReducer from './groupReducer';\n\nexport default combineReducers({\n    userReducer,\n    messageReducer,\n    groupReducer,\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport { insertMessage } from './redux/actions/messageActions';\nimport { insertGroup } from './redux/actions/groupActions';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n// const webSocket = new WebSocket('ws://localhost:3003');\n// const webSocket = new WebSocket('ws://172.28.0.1:3003');\n// const webSocket = new WebSocket('ws://' + window.location.host.split(':')[0] + (window.location.port && `:${window.location.port}`) + '/websocket');\nconst webSocket = new WebSocket('ws://' + window.location.host.split(':')[0] + (window.location.port && `:${window.location.port}`) + '/websocket/');\n\nwebSocket.onmessage = (message) => {\n    const parsed = JSON.parse(message.data);\n    if (parsed.channel === 'messages') {\n        store.dispatch(insertMessage(JSON.parse(parsed.message)));\n    }\n    if (parsed.channel === 'groups') {\n        store.dispatch(insertGroup(JSON.parse(parsed.message)));\n    }\n};\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}