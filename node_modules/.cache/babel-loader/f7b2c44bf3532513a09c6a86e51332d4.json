{"ast":null,"code":"import axios from'axios';export var updateMessages=function updateMessages(messages){return{type:'UPDATE_MESSAGES',messages:messages};};export var insertMessage=function insertMessage(message){return{type:'INSERT_MESSAGE',message:message};};export var handleTextChange=function handleTextChange(text){return{type:'UPDATE_TEXT',text:text};};export var submitMessage=function submitMessage(){return function(dispatch,getState){var docs={group:getState().groupReducer.group._id,message:getState().messageReducer.text};axios.post('/messenger/postMessage',docs,{withCredentials:true}).then(function(){}).catch(function(e){return console.log(e);});dispatch(handleTextChange(''));};};","map":{"version":3,"sources":["/Users/macx/Desktop/final-project-superteam/src/redux/actions/messageActions.js"],"names":["axios","updateMessages","messages","type","insertMessage","message","handleTextChange","text","submitMessage","dispatch","getState","docs","group","groupReducer","_id","messageReducer","post","withCredentials","then","catch","e","console","log"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,QAAQ,CAAI,CACtC,MAAO,CACHC,IAAI,CAAE,iBADH,CAEHD,QAAQ,CAARA,QAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,OAAO,CAAI,CACpC,MAAO,CACHF,IAAI,CAAE,gBADH,CAEHE,OAAO,CAAPA,OAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,IAAI,CAAI,CACpC,MAAO,CACHJ,IAAI,CAAE,aADH,CAEHI,IAAI,CAAJA,IAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAM,UAACC,QAAD,CAAWC,QAAX,CAAwB,CACvD,GAAMC,CAAAA,IAAI,CAAG,CACTC,KAAK,CAAEF,QAAQ,GAAGG,YAAX,CAAwBD,KAAxB,CAA8BE,GAD5B,CAETT,OAAO,CAAEK,QAAQ,GAAGK,cAAX,CAA0BR,IAF1B,CAAb,CAIAP,KAAK,CAACgB,IAAN,CAAW,wBAAX,CAAqCL,IAArC,CAA2C,CAAEM,eAAe,CAAE,IAAnB,CAA3C,EACKC,IADL,CACU,UAAM,CAAG,CADnB,EAEKC,KAFL,CAEW,SAAAC,CAAC,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ,EAFZ,EAGAX,QAAQ,CAACH,gBAAgB,CAAC,EAAD,CAAjB,CAAR,CACH,CAT4B,EAAtB","sourcesContent":["import axios from 'axios';\n\nexport const updateMessages = messages => {\n    return {\n        type: 'UPDATE_MESSAGES',\n        messages,\n    };\n};\n\nexport const insertMessage = message => {\n    return {\n        type: 'INSERT_MESSAGE',\n        message,\n    };\n};\n\nexport const handleTextChange = text => {\n    return {\n        type: 'UPDATE_TEXT',\n        text,\n    };\n};\n\nexport const submitMessage = () => (dispatch, getState) => {\n    const docs = {\n        group: getState().groupReducer.group._id,\n        message: getState().messageReducer.text,\n    }\n    axios.post('/messenger/postMessage', docs, { withCredentials: true })\n        .then(() => { })\n        .catch(e => console.log(e));\n    dispatch(handleTextChange(''));\n};"]},"metadata":{},"sourceType":"module"}